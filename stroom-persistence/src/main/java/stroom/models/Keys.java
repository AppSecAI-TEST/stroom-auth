/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import stroom.models.tables.AnalOutDatSrc;
import stroom.models.tables.AppPerm;
import stroom.models.tables.ClstrLk;
import stroom.models.tables.Dash;
import stroom.models.tables.Dict;
import stroom.models.tables.DocPerm;
import stroom.models.tables.Fd;
import stroom.models.tables.Folder;
import stroom.models.tables.GlobProp;
import stroom.models.tables.Idx;
import stroom.models.tables.IdxShrd;
import stroom.models.tables.IdxVol;
import stroom.models.tables.Jb;
import stroom.models.tables.JbNd;
import stroom.models.tables.Nd;
import stroom.models.tables.Perm;
import stroom.models.tables.Pipe;
import stroom.models.tables.Query;
import stroom.models.tables.Res;
import stroom.models.tables.Rk;
import stroom.models.tables.SchemaVersion;
import stroom.models.tables.Script;
import stroom.models.tables.SqlStatKey;
import stroom.models.tables.SqlStatVal;
import stroom.models.tables.StatDatSrc;
import stroom.models.tables.StateDatSrc;
import stroom.models.tables.Strm;
import stroom.models.tables.StrmAtrKey;
import stroom.models.tables.StrmAtrVal;
import stroom.models.tables.StrmProc;
import stroom.models.tables.StrmProcFilt;
import stroom.models.tables.StrmProcFiltTrac;
import stroom.models.tables.StrmTask;
import stroom.models.tables.StrmTp;
import stroom.models.tables.StrmVol;
import stroom.models.tables.StroomStatsStore;
import stroom.models.tables.TxtConv;
import stroom.models.tables.Usr;
import stroom.models.tables.UsrGrpUsr;
import stroom.models.tables.Vis;
import stroom.models.tables.Vol;
import stroom.models.tables.VolState;
import stroom.models.tables.XmlSchema;
import stroom.models.tables.Xslt;
import stroom.models.tables.records.AnalOutDatSrcRecord;
import stroom.models.tables.records.AppPermRecord;
import stroom.models.tables.records.ClstrLkRecord;
import stroom.models.tables.records.DashRecord;
import stroom.models.tables.records.DictRecord;
import stroom.models.tables.records.DocPermRecord;
import stroom.models.tables.records.FdRecord;
import stroom.models.tables.records.FolderRecord;
import stroom.models.tables.records.GlobPropRecord;
import stroom.models.tables.records.IdxRecord;
import stroom.models.tables.records.IdxShrdRecord;
import stroom.models.tables.records.IdxVolRecord;
import stroom.models.tables.records.JbNdRecord;
import stroom.models.tables.records.JbRecord;
import stroom.models.tables.records.NdRecord;
import stroom.models.tables.records.PermRecord;
import stroom.models.tables.records.PipeRecord;
import stroom.models.tables.records.QueryRecord;
import stroom.models.tables.records.ResRecord;
import stroom.models.tables.records.RkRecord;
import stroom.models.tables.records.SchemaVersionRecord;
import stroom.models.tables.records.ScriptRecord;
import stroom.models.tables.records.SqlStatKeyRecord;
import stroom.models.tables.records.SqlStatValRecord;
import stroom.models.tables.records.StatDatSrcRecord;
import stroom.models.tables.records.StateDatSrcRecord;
import stroom.models.tables.records.StrmAtrKeyRecord;
import stroom.models.tables.records.StrmAtrValRecord;
import stroom.models.tables.records.StrmProcFiltRecord;
import stroom.models.tables.records.StrmProcFiltTracRecord;
import stroom.models.tables.records.StrmProcRecord;
import stroom.models.tables.records.StrmRecord;
import stroom.models.tables.records.StrmTaskRecord;
import stroom.models.tables.records.StrmTpRecord;
import stroom.models.tables.records.StrmVolRecord;
import stroom.models.tables.records.StroomStatsStoreRecord;
import stroom.models.tables.records.TxtConvRecord;
import stroom.models.tables.records.UsrGrpUsrRecord;
import stroom.models.tables.records.UsrRecord;
import stroom.models.tables.records.VisRecord;
import stroom.models.tables.records.VolRecord;
import stroom.models.tables.records.VolStateRecord;
import stroom.models.tables.records.XmlSchemaRecord;
import stroom.models.tables.records.XsltRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>stroom</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AnalOutDatSrcRecord, Integer> IDENTITY_ANAL_OUT_DAT_SRC = Identities0.IDENTITY_ANAL_OUT_DAT_SRC;
    public static final Identity<AppPermRecord, Long> IDENTITY_APP_PERM = Identities0.IDENTITY_APP_PERM;
    public static final Identity<ClstrLkRecord, Integer> IDENTITY_CLSTR_LK = Identities0.IDENTITY_CLSTR_LK;
    public static final Identity<DashRecord, Integer> IDENTITY_DASH = Identities0.IDENTITY_DASH;
    public static final Identity<DictRecord, Integer> IDENTITY_DICT = Identities0.IDENTITY_DICT;
    public static final Identity<DocPermRecord, Long> IDENTITY_DOC_PERM = Identities0.IDENTITY_DOC_PERM;
    public static final Identity<FdRecord, Integer> IDENTITY_FD = Identities0.IDENTITY_FD;
    public static final Identity<FolderRecord, Integer> IDENTITY_FOLDER = Identities0.IDENTITY_FOLDER;
    public static final Identity<GlobPropRecord, Integer> IDENTITY_GLOB_PROP = Identities0.IDENTITY_GLOB_PROP;
    public static final Identity<IdxRecord, Integer> IDENTITY_IDX = Identities0.IDENTITY_IDX;
    public static final Identity<IdxShrdRecord, Integer> IDENTITY_IDX_SHRD = Identities0.IDENTITY_IDX_SHRD;
    public static final Identity<JbRecord, Integer> IDENTITY_JB = Identities0.IDENTITY_JB;
    public static final Identity<JbNdRecord, Integer> IDENTITY_JB_ND = Identities0.IDENTITY_JB_ND;
    public static final Identity<NdRecord, Integer> IDENTITY_ND = Identities0.IDENTITY_ND;
    public static final Identity<PermRecord, Integer> IDENTITY_PERM = Identities0.IDENTITY_PERM;
    public static final Identity<PipeRecord, Integer> IDENTITY_PIPE = Identities0.IDENTITY_PIPE;
    public static final Identity<QueryRecord, Integer> IDENTITY_QUERY = Identities0.IDENTITY_QUERY;
    public static final Identity<ResRecord, Integer> IDENTITY_RES = Identities0.IDENTITY_RES;
    public static final Identity<RkRecord, Integer> IDENTITY_RK = Identities0.IDENTITY_RK;
    public static final Identity<ScriptRecord, Integer> IDENTITY_SCRIPT = Identities0.IDENTITY_SCRIPT;
    public static final Identity<SqlStatKeyRecord, Long> IDENTITY_SQL_STAT_KEY = Identities0.IDENTITY_SQL_STAT_KEY;
    public static final Identity<StateDatSrcRecord, Integer> IDENTITY_STATE_DAT_SRC = Identities0.IDENTITY_STATE_DAT_SRC;
    public static final Identity<StatDatSrcRecord, Integer> IDENTITY_STAT_DAT_SRC = Identities0.IDENTITY_STAT_DAT_SRC;
    public static final Identity<StrmRecord, Long> IDENTITY_STRM = Identities0.IDENTITY_STRM;
    public static final Identity<StrmAtrKeyRecord, Integer> IDENTITY_STRM_ATR_KEY = Identities0.IDENTITY_STRM_ATR_KEY;
    public static final Identity<StrmAtrValRecord, Long> IDENTITY_STRM_ATR_VAL = Identities0.IDENTITY_STRM_ATR_VAL;
    public static final Identity<StrmProcRecord, Integer> IDENTITY_STRM_PROC = Identities0.IDENTITY_STRM_PROC;
    public static final Identity<StrmProcFiltRecord, Integer> IDENTITY_STRM_PROC_FILT = Identities0.IDENTITY_STRM_PROC_FILT;
    public static final Identity<StrmProcFiltTracRecord, Integer> IDENTITY_STRM_PROC_FILT_TRAC = Identities0.IDENTITY_STRM_PROC_FILT_TRAC;
    public static final Identity<StrmTaskRecord, Long> IDENTITY_STRM_TASK = Identities0.IDENTITY_STRM_TASK;
    public static final Identity<StrmTpRecord, Integer> IDENTITY_STRM_TP = Identities0.IDENTITY_STRM_TP;
    public static final Identity<StrmVolRecord, Long> IDENTITY_STRM_VOL = Identities0.IDENTITY_STRM_VOL;
    public static final Identity<StroomStatsStoreRecord, Integer> IDENTITY_STROOM_STATS_STORE = Identities0.IDENTITY_STROOM_STATS_STORE;
    public static final Identity<TxtConvRecord, Integer> IDENTITY_TXT_CONV = Identities0.IDENTITY_TXT_CONV;
    public static final Identity<UsrRecord, Integer> IDENTITY_USR = Identities0.IDENTITY_USR;
    public static final Identity<UsrGrpUsrRecord, Long> IDENTITY_USR_GRP_USR = Identities0.IDENTITY_USR_GRP_USR;
    public static final Identity<VisRecord, Integer> IDENTITY_VIS = Identities0.IDENTITY_VIS;
    public static final Identity<VolRecord, Integer> IDENTITY_VOL = Identities0.IDENTITY_VOL;
    public static final Identity<VolStateRecord, Integer> IDENTITY_VOL_STATE = Identities0.IDENTITY_VOL_STATE;
    public static final Identity<XmlSchemaRecord, Integer> IDENTITY_XML_SCHEMA = Identities0.IDENTITY_XML_SCHEMA;
    public static final Identity<XsltRecord, Integer> IDENTITY_XSLT = Identities0.IDENTITY_XSLT;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AnalOutDatSrcRecord> KEY_ANAL_OUT_DAT_SRC_PRIMARY = UniqueKeys0.KEY_ANAL_OUT_DAT_SRC_PRIMARY;
    public static final UniqueKey<AnalOutDatSrcRecord> KEY_ANAL_OUT_DAT_SRC_NAME = UniqueKeys0.KEY_ANAL_OUT_DAT_SRC_NAME;
    public static final UniqueKey<AnalOutDatSrcRecord> KEY_ANAL_OUT_DAT_SRC_UUID = UniqueKeys0.KEY_ANAL_OUT_DAT_SRC_UUID;
    public static final UniqueKey<AppPermRecord> KEY_APP_PERM_PRIMARY = UniqueKeys0.KEY_APP_PERM_PRIMARY;
    public static final UniqueKey<AppPermRecord> KEY_APP_PERM_APP_PERM_USR_UUID_FK_PERM_ID_IDX = UniqueKeys0.KEY_APP_PERM_APP_PERM_USR_UUID_FK_PERM_ID_IDX;
    public static final UniqueKey<ClstrLkRecord> KEY_CLSTR_LK_PRIMARY = UniqueKeys0.KEY_CLSTR_LK_PRIMARY;
    public static final UniqueKey<ClstrLkRecord> KEY_CLSTR_LK_NAME = UniqueKeys0.KEY_CLSTR_LK_NAME;
    public static final UniqueKey<DashRecord> KEY_DASH_PRIMARY = UniqueKeys0.KEY_DASH_PRIMARY;
    public static final UniqueKey<DashRecord> KEY_DASH_NAME = UniqueKeys0.KEY_DASH_NAME;
    public static final UniqueKey<DashRecord> KEY_DASH_UUID = UniqueKeys0.KEY_DASH_UUID;
    public static final UniqueKey<DictRecord> KEY_DICT_PRIMARY = UniqueKeys0.KEY_DICT_PRIMARY;
    public static final UniqueKey<DictRecord> KEY_DICT_NAME = UniqueKeys0.KEY_DICT_NAME;
    public static final UniqueKey<DictRecord> KEY_DICT_UUID = UniqueKeys0.KEY_DICT_UUID;
    public static final UniqueKey<DocPermRecord> KEY_DOC_PERM_PRIMARY = UniqueKeys0.KEY_DOC_PERM_PRIMARY;
    public static final UniqueKey<DocPermRecord> KEY_DOC_PERM_DOC_PERM_USR_UUID_DOC_TP_DOC_UUID_PERM_IDX = UniqueKeys0.KEY_DOC_PERM_DOC_PERM_USR_UUID_DOC_TP_DOC_UUID_PERM_IDX;
    public static final UniqueKey<FdRecord> KEY_FD_PRIMARY = UniqueKeys0.KEY_FD_PRIMARY;
    public static final UniqueKey<FdRecord> KEY_FD_NAME = UniqueKeys0.KEY_FD_NAME;
    public static final UniqueKey<FdRecord> KEY_FD_UUID = UniqueKeys0.KEY_FD_UUID;
    public static final UniqueKey<FolderRecord> KEY_FOLDER_PRIMARY = UniqueKeys0.KEY_FOLDER_PRIMARY;
    public static final UniqueKey<FolderRecord> KEY_FOLDER_NAME = UniqueKeys0.KEY_FOLDER_NAME;
    public static final UniqueKey<FolderRecord> KEY_FOLDER_UUID = UniqueKeys0.KEY_FOLDER_UUID;
    public static final UniqueKey<GlobPropRecord> KEY_GLOB_PROP_PRIMARY = UniqueKeys0.KEY_GLOB_PROP_PRIMARY;
    public static final UniqueKey<GlobPropRecord> KEY_GLOB_PROP_NAME = UniqueKeys0.KEY_GLOB_PROP_NAME;
    public static final UniqueKey<IdxRecord> KEY_IDX_PRIMARY = UniqueKeys0.KEY_IDX_PRIMARY;
    public static final UniqueKey<IdxRecord> KEY_IDX_NAME = UniqueKeys0.KEY_IDX_NAME;
    public static final UniqueKey<IdxRecord> KEY_IDX_UUID = UniqueKeys0.KEY_IDX_UUID;
    public static final UniqueKey<IdxShrdRecord> KEY_IDX_SHRD_PRIMARY = UniqueKeys0.KEY_IDX_SHRD_PRIMARY;
    public static final UniqueKey<IdxVolRecord> KEY_IDX_VOL_PRIMARY = UniqueKeys0.KEY_IDX_VOL_PRIMARY;
    public static final UniqueKey<JbRecord> KEY_JB_PRIMARY = UniqueKeys0.KEY_JB_PRIMARY;
    public static final UniqueKey<JbRecord> KEY_JB_NAME = UniqueKeys0.KEY_JB_NAME;
    public static final UniqueKey<JbNdRecord> KEY_JB_ND_PRIMARY = UniqueKeys0.KEY_JB_ND_PRIMARY;
    public static final UniqueKey<JbNdRecord> KEY_JB_ND_FK_ND_ID = UniqueKeys0.KEY_JB_ND_FK_ND_ID;
    public static final UniqueKey<NdRecord> KEY_ND_PRIMARY = UniqueKeys0.KEY_ND_PRIMARY;
    public static final UniqueKey<NdRecord> KEY_ND_NAME = UniqueKeys0.KEY_ND_NAME;
    public static final UniqueKey<PermRecord> KEY_PERM_PRIMARY = UniqueKeys0.KEY_PERM_PRIMARY;
    public static final UniqueKey<PermRecord> KEY_PERM_NAME = UniqueKeys0.KEY_PERM_NAME;
    public static final UniqueKey<PipeRecord> KEY_PIPE_PRIMARY = UniqueKeys0.KEY_PIPE_PRIMARY;
    public static final UniqueKey<PipeRecord> KEY_PIPE_NAME = UniqueKeys0.KEY_PIPE_NAME;
    public static final UniqueKey<PipeRecord> KEY_PIPE_UUID = UniqueKeys0.KEY_PIPE_UUID;
    public static final UniqueKey<QueryRecord> KEY_QUERY_PRIMARY = UniqueKeys0.KEY_QUERY_PRIMARY;
    public static final UniqueKey<QueryRecord> KEY_QUERY_UUID = UniqueKeys0.KEY_QUERY_UUID;
    public static final UniqueKey<ResRecord> KEY_RES_PRIMARY = UniqueKeys0.KEY_RES_PRIMARY;
    public static final UniqueKey<RkRecord> KEY_RK_PRIMARY = UniqueKeys0.KEY_RK_PRIMARY;
    public static final UniqueKey<RkRecord> KEY_RK_NAME = UniqueKeys0.KEY_RK_NAME;
    public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = UniqueKeys0.KEY_SCHEMA_VERSION_PRIMARY;
    public static final UniqueKey<ScriptRecord> KEY_SCRIPT_PRIMARY = UniqueKeys0.KEY_SCRIPT_PRIMARY;
    public static final UniqueKey<ScriptRecord> KEY_SCRIPT_NAME = UniqueKeys0.KEY_SCRIPT_NAME;
    public static final UniqueKey<ScriptRecord> KEY_SCRIPT_UUID = UniqueKeys0.KEY_SCRIPT_UUID;
    public static final UniqueKey<SqlStatKeyRecord> KEY_SQL_STAT_KEY_PRIMARY = UniqueKeys0.KEY_SQL_STAT_KEY_PRIMARY;
    public static final UniqueKey<SqlStatKeyRecord> KEY_SQL_STAT_KEY_NAME = UniqueKeys0.KEY_SQL_STAT_KEY_NAME;
    public static final UniqueKey<SqlStatValRecord> KEY_SQL_STAT_VAL_PRIMARY = UniqueKeys0.KEY_SQL_STAT_VAL_PRIMARY;
    public static final UniqueKey<StateDatSrcRecord> KEY_STATE_DAT_SRC_PRIMARY = UniqueKeys0.KEY_STATE_DAT_SRC_PRIMARY;
    public static final UniqueKey<StateDatSrcRecord> KEY_STATE_DAT_SRC_NAME = UniqueKeys0.KEY_STATE_DAT_SRC_NAME;
    public static final UniqueKey<StateDatSrcRecord> KEY_STATE_DAT_SRC_UUID = UniqueKeys0.KEY_STATE_DAT_SRC_UUID;
    public static final UniqueKey<StatDatSrcRecord> KEY_STAT_DAT_SRC_PRIMARY = UniqueKeys0.KEY_STAT_DAT_SRC_PRIMARY;
    public static final UniqueKey<StatDatSrcRecord> KEY_STAT_DAT_SRC_NAME = UniqueKeys0.KEY_STAT_DAT_SRC_NAME;
    public static final UniqueKey<StatDatSrcRecord> KEY_STAT_DAT_SRC_UUID = UniqueKeys0.KEY_STAT_DAT_SRC_UUID;
    public static final UniqueKey<StrmRecord> KEY_STRM_PRIMARY = UniqueKeys0.KEY_STRM_PRIMARY;
    public static final UniqueKey<StrmAtrKeyRecord> KEY_STRM_ATR_KEY_PRIMARY = UniqueKeys0.KEY_STRM_ATR_KEY_PRIMARY;
    public static final UniqueKey<StrmAtrKeyRecord> KEY_STRM_ATR_KEY_NAME = UniqueKeys0.KEY_STRM_ATR_KEY_NAME;
    public static final UniqueKey<StrmAtrValRecord> KEY_STRM_ATR_VAL_PRIMARY = UniqueKeys0.KEY_STRM_ATR_VAL_PRIMARY;
    public static final UniqueKey<StrmProcRecord> KEY_STRM_PROC_PRIMARY = UniqueKeys0.KEY_STRM_PROC_PRIMARY;
    public static final UniqueKey<StrmProcFiltRecord> KEY_STRM_PROC_FILT_PRIMARY = UniqueKeys0.KEY_STRM_PROC_FILT_PRIMARY;
    public static final UniqueKey<StrmProcFiltTracRecord> KEY_STRM_PROC_FILT_TRAC_PRIMARY = UniqueKeys0.KEY_STRM_PROC_FILT_TRAC_PRIMARY;
    public static final UniqueKey<StrmTaskRecord> KEY_STRM_TASK_PRIMARY = UniqueKeys0.KEY_STRM_TASK_PRIMARY;
    public static final UniqueKey<StrmTpRecord> KEY_STRM_TP_PRIMARY = UniqueKeys0.KEY_STRM_TP_PRIMARY;
    public static final UniqueKey<StrmTpRecord> KEY_STRM_TP_NAME = UniqueKeys0.KEY_STRM_TP_NAME;
    public static final UniqueKey<StrmVolRecord> KEY_STRM_VOL_PRIMARY = UniqueKeys0.KEY_STRM_VOL_PRIMARY;
    public static final UniqueKey<StroomStatsStoreRecord> KEY_STROOM_STATS_STORE_PRIMARY = UniqueKeys0.KEY_STROOM_STATS_STORE_PRIMARY;
    public static final UniqueKey<StroomStatsStoreRecord> KEY_STROOM_STATS_STORE_NAME = UniqueKeys0.KEY_STROOM_STATS_STORE_NAME;
    public static final UniqueKey<StroomStatsStoreRecord> KEY_STROOM_STATS_STORE_UUID = UniqueKeys0.KEY_STROOM_STATS_STORE_UUID;
    public static final UniqueKey<TxtConvRecord> KEY_TXT_CONV_PRIMARY = UniqueKeys0.KEY_TXT_CONV_PRIMARY;
    public static final UniqueKey<TxtConvRecord> KEY_TXT_CONV_NAME = UniqueKeys0.KEY_TXT_CONV_NAME;
    public static final UniqueKey<TxtConvRecord> KEY_TXT_CONV_UUID = UniqueKeys0.KEY_TXT_CONV_UUID;
    public static final UniqueKey<UsrRecord> KEY_USR_PRIMARY = UniqueKeys0.KEY_USR_PRIMARY;
    public static final UniqueKey<UsrRecord> KEY_USR_NAME = UniqueKeys0.KEY_USR_NAME;
    public static final UniqueKey<UsrRecord> KEY_USR_USR_UUID_IDX = UniqueKeys0.KEY_USR_USR_UUID_IDX;
    public static final UniqueKey<UsrGrpUsrRecord> KEY_USR_GRP_USR_PRIMARY = UniqueKeys0.KEY_USR_GRP_USR_PRIMARY;
    public static final UniqueKey<UsrGrpUsrRecord> KEY_USR_GRP_USR_USR_GRP_USR_GRP_UUID_USR_UUID_IDX = UniqueKeys0.KEY_USR_GRP_USR_USR_GRP_USR_GRP_UUID_USR_UUID_IDX;
    public static final UniqueKey<VisRecord> KEY_VIS_PRIMARY = UniqueKeys0.KEY_VIS_PRIMARY;
    public static final UniqueKey<VisRecord> KEY_VIS_NAME = UniqueKeys0.KEY_VIS_NAME;
    public static final UniqueKey<VisRecord> KEY_VIS_UUID = UniqueKeys0.KEY_VIS_UUID;
    public static final UniqueKey<VolRecord> KEY_VOL_PRIMARY = UniqueKeys0.KEY_VOL_PRIMARY;
    public static final UniqueKey<VolRecord> KEY_VOL_FK_ND_ID = UniqueKeys0.KEY_VOL_FK_ND_ID;
    public static final UniqueKey<VolStateRecord> KEY_VOL_STATE_PRIMARY = UniqueKeys0.KEY_VOL_STATE_PRIMARY;
    public static final UniqueKey<XmlSchemaRecord> KEY_XML_SCHEMA_PRIMARY = UniqueKeys0.KEY_XML_SCHEMA_PRIMARY;
    public static final UniqueKey<XmlSchemaRecord> KEY_XML_SCHEMA_NAME = UniqueKeys0.KEY_XML_SCHEMA_NAME;
    public static final UniqueKey<XmlSchemaRecord> KEY_XML_SCHEMA_UUID = UniqueKeys0.KEY_XML_SCHEMA_UUID;
    public static final UniqueKey<XsltRecord> KEY_XSLT_PRIMARY = UniqueKeys0.KEY_XSLT_PRIMARY;
    public static final UniqueKey<XsltRecord> KEY_XSLT_NAME = UniqueKeys0.KEY_XSLT_NAME;
    public static final UniqueKey<XsltRecord> KEY_XSLT_UUID = UniqueKeys0.KEY_XSLT_UUID;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AnalOutDatSrcRecord, FolderRecord> ANAL_OUT_DAT_SRC_FK_FOLDER_ID = ForeignKeys0.ANAL_OUT_DAT_SRC_FK_FOLDER_ID;
    public static final ForeignKey<DashRecord, FolderRecord> DASH_FK_FOLDER_ID = ForeignKeys0.DASH_FK_FOLDER_ID;
    public static final ForeignKey<DictRecord, FolderRecord> DICT_FK_FOLDER_ID = ForeignKeys0.DICT_FK_FOLDER_ID;
    public static final ForeignKey<FdRecord, FolderRecord> FD_FK_FOLDER_ID = ForeignKeys0.FD_FK_FOLDER_ID;
    public static final ForeignKey<FdRecord, StrmTpRecord> FD_FK_STRM_TP_ID = ForeignKeys0.FD_FK_STRM_TP_ID;
    public static final ForeignKey<FolderRecord, FolderRecord> FK_FOLDER_ID = ForeignKeys0.FK_FOLDER_ID;
    public static final ForeignKey<IdxRecord, FolderRecord> IDX_FK_FOLDER_ID = ForeignKeys0.IDX_FK_FOLDER_ID;
    public static final ForeignKey<IdxShrdRecord, IdxRecord> IDX_SHRD_FK_IDX_ID = ForeignKeys0.IDX_SHRD_FK_IDX_ID;
    public static final ForeignKey<IdxShrdRecord, NdRecord> IDX_SHRD_FK_ND_ID = ForeignKeys0.IDX_SHRD_FK_ND_ID;
    public static final ForeignKey<IdxShrdRecord, VolRecord> IDX_SHRD_FK_VOL_ID = ForeignKeys0.IDX_SHRD_FK_VOL_ID;
    public static final ForeignKey<IdxVolRecord, IdxRecord> VOL_FK_IDX_ID = ForeignKeys0.VOL_FK_IDX_ID;
    public static final ForeignKey<IdxVolRecord, VolRecord> IDX_FK_VOL_ID = ForeignKeys0.IDX_FK_VOL_ID;
    public static final ForeignKey<JbNdRecord, JbRecord> JB_ND_FK_JB_ID = ForeignKeys0.JB_ND_FK_JB_ID;
    public static final ForeignKey<JbNdRecord, NdRecord> JB_ND_FK_ND_ID = ForeignKeys0.JB_ND_FK_ND_ID;
    public static final ForeignKey<NdRecord, RkRecord> ND_FK_RK_ID = ForeignKeys0.ND_FK_RK_ID;
    public static final ForeignKey<PipeRecord, FolderRecord> PIPE_FK_FOLDER_ID = ForeignKeys0.PIPE_FK_FOLDER_ID;
    public static final ForeignKey<QueryRecord, DashRecord> QUERY_FK_DASH_ID = ForeignKeys0.QUERY_FK_DASH_ID;
    public static final ForeignKey<ScriptRecord, ResRecord> SCRIPT_FK_RES_ID = ForeignKeys0.SCRIPT_FK_RES_ID;
    public static final ForeignKey<ScriptRecord, FolderRecord> SCRIPT_FK_FOLDER_ID = ForeignKeys0.SCRIPT_FK_FOLDER_ID;
    public static final ForeignKey<SqlStatValRecord, SqlStatKeyRecord> SQL_STAT_VAL_FK_STAT_KEY_ID = ForeignKeys0.SQL_STAT_VAL_FK_STAT_KEY_ID;
    public static final ForeignKey<StateDatSrcRecord, FolderRecord> STATE_DAT_SRC_FK_FOLDER_ID = ForeignKeys0.STATE_DAT_SRC_FK_FOLDER_ID;
    public static final ForeignKey<StatDatSrcRecord, FolderRecord> STAT_DAT_SRC_FK_FOLDER_ID = ForeignKeys0.STAT_DAT_SRC_FK_FOLDER_ID;
    public static final ForeignKey<StrmRecord, FdRecord> STRM_FK_FD_ID = ForeignKeys0.STRM_FK_FD_ID;
    public static final ForeignKey<StrmRecord, StrmProcRecord> STRM_FK_STRM_PROC_ID = ForeignKeys0.STRM_FK_STRM_PROC_ID;
    public static final ForeignKey<StrmRecord, StrmTpRecord> STRM_FK_STRM_TP_ID = ForeignKeys0.STRM_FK_STRM_TP_ID;
    public static final ForeignKey<StrmProcRecord, PipeRecord> STRM_PROC_FK_PIPE_ID = ForeignKeys0.STRM_PROC_FK_PIPE_ID;
    public static final ForeignKey<StrmProcFiltRecord, StrmProcRecord> STRM_PROC_FILT_FK_STRM_PROC_ID = ForeignKeys0.STRM_PROC_FILT_FK_STRM_PROC_ID;
    public static final ForeignKey<StrmProcFiltRecord, StrmProcFiltTracRecord> STRM_PROC_FILT_FK_STRM_PROC_FILT_TRAC_ID = ForeignKeys0.STRM_PROC_FILT_FK_STRM_PROC_FILT_TRAC_ID;
    public static final ForeignKey<StrmTaskRecord, NdRecord> STRM_TASK_FK_ND_ID = ForeignKeys0.STRM_TASK_FK_ND_ID;
    public static final ForeignKey<StrmTaskRecord, StrmProcFiltRecord> STRM_TASK_FK_STRM_PROC_FILT_ID = ForeignKeys0.STRM_TASK_FK_STRM_PROC_FILT_ID;
    public static final ForeignKey<StrmVolRecord, StrmRecord> STRM_VOL_FK_STRM_ID = ForeignKeys0.STRM_VOL_FK_STRM_ID;
    public static final ForeignKey<StrmVolRecord, VolRecord> STRM_VOL_FK_VOL_ID = ForeignKeys0.STRM_VOL_FK_VOL_ID;
    public static final ForeignKey<StroomStatsStoreRecord, FolderRecord> STROOM_STATS_STORE_FK_FOLDER_ID = ForeignKeys0.STROOM_STATS_STORE_FK_FOLDER_ID;
    public static final ForeignKey<TxtConvRecord, FolderRecord> TXT_CONV_FK_FOLDER_ID = ForeignKeys0.TXT_CONV_FK_FOLDER_ID;
    public static final ForeignKey<VisRecord, FolderRecord> VIS_FK_FOLDER_ID = ForeignKeys0.VIS_FK_FOLDER_ID;
    public static final ForeignKey<VolRecord, NdRecord> VOL_FK_ND_ID = ForeignKeys0.VOL_FK_ND_ID;
    public static final ForeignKey<VolRecord, VolStateRecord> VOL_STAT_FK_VOL_STATE_ID = ForeignKeys0.VOL_STAT_FK_VOL_STATE_ID;
    public static final ForeignKey<XmlSchemaRecord, FolderRecord> XML_SCHEMA_FK_FOLDER_ID = ForeignKeys0.XML_SCHEMA_FK_FOLDER_ID;
    public static final ForeignKey<XsltRecord, FolderRecord> XSLT_FK_FOLDER_ID = ForeignKeys0.XSLT_FK_FOLDER_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AnalOutDatSrcRecord, Integer> IDENTITY_ANAL_OUT_DAT_SRC = createIdentity(AnalOutDatSrc.ANAL_OUT_DAT_SRC, AnalOutDatSrc.ANAL_OUT_DAT_SRC.ID);
        public static Identity<AppPermRecord, Long> IDENTITY_APP_PERM = createIdentity(AppPerm.APP_PERM, AppPerm.APP_PERM.ID);
        public static Identity<ClstrLkRecord, Integer> IDENTITY_CLSTR_LK = createIdentity(ClstrLk.CLSTR_LK, ClstrLk.CLSTR_LK.ID);
        public static Identity<DashRecord, Integer> IDENTITY_DASH = createIdentity(Dash.DASH, Dash.DASH.ID);
        public static Identity<DictRecord, Integer> IDENTITY_DICT = createIdentity(Dict.DICT, Dict.DICT.ID);
        public static Identity<DocPermRecord, Long> IDENTITY_DOC_PERM = createIdentity(DocPerm.DOC_PERM, DocPerm.DOC_PERM.ID);
        public static Identity<FdRecord, Integer> IDENTITY_FD = createIdentity(Fd.FD, Fd.FD.ID);
        public static Identity<FolderRecord, Integer> IDENTITY_FOLDER = createIdentity(Folder.FOLDER, Folder.FOLDER.ID);
        public static Identity<GlobPropRecord, Integer> IDENTITY_GLOB_PROP = createIdentity(GlobProp.GLOB_PROP, GlobProp.GLOB_PROP.ID);
        public static Identity<IdxRecord, Integer> IDENTITY_IDX = createIdentity(Idx.IDX, Idx.IDX.ID);
        public static Identity<IdxShrdRecord, Integer> IDENTITY_IDX_SHRD = createIdentity(IdxShrd.IDX_SHRD, IdxShrd.IDX_SHRD.ID);
        public static Identity<JbRecord, Integer> IDENTITY_JB = createIdentity(Jb.JB, Jb.JB.ID);
        public static Identity<JbNdRecord, Integer> IDENTITY_JB_ND = createIdentity(JbNd.JB_ND, JbNd.JB_ND.ID);
        public static Identity<NdRecord, Integer> IDENTITY_ND = createIdentity(Nd.ND, Nd.ND.ID);
        public static Identity<PermRecord, Integer> IDENTITY_PERM = createIdentity(Perm.PERM, Perm.PERM.ID);
        public static Identity<PipeRecord, Integer> IDENTITY_PIPE = createIdentity(Pipe.PIPE, Pipe.PIPE.ID);
        public static Identity<QueryRecord, Integer> IDENTITY_QUERY = createIdentity(Query.QUERY, Query.QUERY.ID);
        public static Identity<ResRecord, Integer> IDENTITY_RES = createIdentity(Res.RES, Res.RES.ID);
        public static Identity<RkRecord, Integer> IDENTITY_RK = createIdentity(Rk.RK, Rk.RK.ID);
        public static Identity<ScriptRecord, Integer> IDENTITY_SCRIPT = createIdentity(Script.SCRIPT, Script.SCRIPT.ID);
        public static Identity<SqlStatKeyRecord, Long> IDENTITY_SQL_STAT_KEY = createIdentity(SqlStatKey.SQL_STAT_KEY, SqlStatKey.SQL_STAT_KEY.ID);
        public static Identity<StateDatSrcRecord, Integer> IDENTITY_STATE_DAT_SRC = createIdentity(StateDatSrc.STATE_DAT_SRC, StateDatSrc.STATE_DAT_SRC.ID);
        public static Identity<StatDatSrcRecord, Integer> IDENTITY_STAT_DAT_SRC = createIdentity(StatDatSrc.STAT_DAT_SRC, StatDatSrc.STAT_DAT_SRC.ID);
        public static Identity<StrmRecord, Long> IDENTITY_STRM = createIdentity(Strm.STRM, Strm.STRM.ID);
        public static Identity<StrmAtrKeyRecord, Integer> IDENTITY_STRM_ATR_KEY = createIdentity(StrmAtrKey.STRM_ATR_KEY, StrmAtrKey.STRM_ATR_KEY.ID);
        public static Identity<StrmAtrValRecord, Long> IDENTITY_STRM_ATR_VAL = createIdentity(StrmAtrVal.STRM_ATR_VAL, StrmAtrVal.STRM_ATR_VAL.ID);
        public static Identity<StrmProcRecord, Integer> IDENTITY_STRM_PROC = createIdentity(StrmProc.STRM_PROC, StrmProc.STRM_PROC.ID);
        public static Identity<StrmProcFiltRecord, Integer> IDENTITY_STRM_PROC_FILT = createIdentity(StrmProcFilt.STRM_PROC_FILT, StrmProcFilt.STRM_PROC_FILT.ID);
        public static Identity<StrmProcFiltTracRecord, Integer> IDENTITY_STRM_PROC_FILT_TRAC = createIdentity(StrmProcFiltTrac.STRM_PROC_FILT_TRAC, StrmProcFiltTrac.STRM_PROC_FILT_TRAC.ID);
        public static Identity<StrmTaskRecord, Long> IDENTITY_STRM_TASK = createIdentity(StrmTask.STRM_TASK, StrmTask.STRM_TASK.ID);
        public static Identity<StrmTpRecord, Integer> IDENTITY_STRM_TP = createIdentity(StrmTp.STRM_TP, StrmTp.STRM_TP.ID);
        public static Identity<StrmVolRecord, Long> IDENTITY_STRM_VOL = createIdentity(StrmVol.STRM_VOL, StrmVol.STRM_VOL.ID);
        public static Identity<StroomStatsStoreRecord, Integer> IDENTITY_STROOM_STATS_STORE = createIdentity(StroomStatsStore.STROOM_STATS_STORE, StroomStatsStore.STROOM_STATS_STORE.ID);
        public static Identity<TxtConvRecord, Integer> IDENTITY_TXT_CONV = createIdentity(TxtConv.TXT_CONV, TxtConv.TXT_CONV.ID);
        public static Identity<UsrRecord, Integer> IDENTITY_USR = createIdentity(Usr.USR, Usr.USR.ID);
        public static Identity<UsrGrpUsrRecord, Long> IDENTITY_USR_GRP_USR = createIdentity(UsrGrpUsr.USR_GRP_USR, UsrGrpUsr.USR_GRP_USR.ID);
        public static Identity<VisRecord, Integer> IDENTITY_VIS = createIdentity(Vis.VIS, Vis.VIS.ID);
        public static Identity<VolRecord, Integer> IDENTITY_VOL = createIdentity(Vol.VOL, Vol.VOL.ID);
        public static Identity<VolStateRecord, Integer> IDENTITY_VOL_STATE = createIdentity(VolState.VOL_STATE, VolState.VOL_STATE.ID);
        public static Identity<XmlSchemaRecord, Integer> IDENTITY_XML_SCHEMA = createIdentity(XmlSchema.XML_SCHEMA, XmlSchema.XML_SCHEMA.ID);
        public static Identity<XsltRecord, Integer> IDENTITY_XSLT = createIdentity(Xslt.XSLT, Xslt.XSLT.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AnalOutDatSrcRecord> KEY_ANAL_OUT_DAT_SRC_PRIMARY = createUniqueKey(AnalOutDatSrc.ANAL_OUT_DAT_SRC, "KEY_ANAL_OUT_DAT_SRC_PRIMARY", AnalOutDatSrc.ANAL_OUT_DAT_SRC.ID);
        public static final UniqueKey<AnalOutDatSrcRecord> KEY_ANAL_OUT_DAT_SRC_NAME = createUniqueKey(AnalOutDatSrc.ANAL_OUT_DAT_SRC, "KEY_ANAL_OUT_DAT_SRC_NAME", AnalOutDatSrc.ANAL_OUT_DAT_SRC.FK_FOLDER_ID, AnalOutDatSrc.ANAL_OUT_DAT_SRC.NAME);
        public static final UniqueKey<AnalOutDatSrcRecord> KEY_ANAL_OUT_DAT_SRC_UUID = createUniqueKey(AnalOutDatSrc.ANAL_OUT_DAT_SRC, "KEY_ANAL_OUT_DAT_SRC_UUID", AnalOutDatSrc.ANAL_OUT_DAT_SRC.UUID);
        public static final UniqueKey<AppPermRecord> KEY_APP_PERM_PRIMARY = createUniqueKey(AppPerm.APP_PERM, "KEY_APP_PERM_PRIMARY", AppPerm.APP_PERM.ID);
        public static final UniqueKey<AppPermRecord> KEY_APP_PERM_APP_PERM_USR_UUID_FK_PERM_ID_IDX = createUniqueKey(AppPerm.APP_PERM, "KEY_APP_PERM_APP_PERM_USR_UUID_FK_PERM_ID_IDX", AppPerm.APP_PERM.USR_UUID, AppPerm.APP_PERM.FK_PERM_ID);
        public static final UniqueKey<ClstrLkRecord> KEY_CLSTR_LK_PRIMARY = createUniqueKey(ClstrLk.CLSTR_LK, "KEY_CLSTR_LK_PRIMARY", ClstrLk.CLSTR_LK.ID);
        public static final UniqueKey<ClstrLkRecord> KEY_CLSTR_LK_NAME = createUniqueKey(ClstrLk.CLSTR_LK, "KEY_CLSTR_LK_NAME", ClstrLk.CLSTR_LK.NAME);
        public static final UniqueKey<DashRecord> KEY_DASH_PRIMARY = createUniqueKey(Dash.DASH, "KEY_DASH_PRIMARY", Dash.DASH.ID);
        public static final UniqueKey<DashRecord> KEY_DASH_NAME = createUniqueKey(Dash.DASH, "KEY_DASH_NAME", Dash.DASH.FK_FOLDER_ID, Dash.DASH.NAME);
        public static final UniqueKey<DashRecord> KEY_DASH_UUID = createUniqueKey(Dash.DASH, "KEY_DASH_UUID", Dash.DASH.UUID);
        public static final UniqueKey<DictRecord> KEY_DICT_PRIMARY = createUniqueKey(Dict.DICT, "KEY_DICT_PRIMARY", Dict.DICT.ID);
        public static final UniqueKey<DictRecord> KEY_DICT_NAME = createUniqueKey(Dict.DICT, "KEY_DICT_NAME", Dict.DICT.FK_FOLDER_ID, Dict.DICT.NAME);
        public static final UniqueKey<DictRecord> KEY_DICT_UUID = createUniqueKey(Dict.DICT, "KEY_DICT_UUID", Dict.DICT.UUID);
        public static final UniqueKey<DocPermRecord> KEY_DOC_PERM_PRIMARY = createUniqueKey(DocPerm.DOC_PERM, "KEY_DOC_PERM_PRIMARY", DocPerm.DOC_PERM.ID);
        public static final UniqueKey<DocPermRecord> KEY_DOC_PERM_DOC_PERM_USR_UUID_DOC_TP_DOC_UUID_PERM_IDX = createUniqueKey(DocPerm.DOC_PERM, "KEY_DOC_PERM_DOC_PERM_USR_UUID_DOC_TP_DOC_UUID_PERM_IDX", DocPerm.DOC_PERM.USR_UUID, DocPerm.DOC_PERM.DOC_TP, DocPerm.DOC_PERM.DOC_UUID, DocPerm.DOC_PERM.PERM);
        public static final UniqueKey<FdRecord> KEY_FD_PRIMARY = createUniqueKey(Fd.FD, "KEY_FD_PRIMARY", Fd.FD.ID);
        public static final UniqueKey<FdRecord> KEY_FD_NAME = createUniqueKey(Fd.FD, "KEY_FD_NAME", Fd.FD.NAME);
        public static final UniqueKey<FdRecord> KEY_FD_UUID = createUniqueKey(Fd.FD, "KEY_FD_UUID", Fd.FD.UUID);
        public static final UniqueKey<FolderRecord> KEY_FOLDER_PRIMARY = createUniqueKey(Folder.FOLDER, "KEY_FOLDER_PRIMARY", Folder.FOLDER.ID);
        public static final UniqueKey<FolderRecord> KEY_FOLDER_NAME = createUniqueKey(Folder.FOLDER, "KEY_FOLDER_NAME", Folder.FOLDER.FK_FOLDER_ID, Folder.FOLDER.NAME);
        public static final UniqueKey<FolderRecord> KEY_FOLDER_UUID = createUniqueKey(Folder.FOLDER, "KEY_FOLDER_UUID", Folder.FOLDER.UUID);
        public static final UniqueKey<GlobPropRecord> KEY_GLOB_PROP_PRIMARY = createUniqueKey(GlobProp.GLOB_PROP, "KEY_GLOB_PROP_PRIMARY", GlobProp.GLOB_PROP.ID);
        public static final UniqueKey<GlobPropRecord> KEY_GLOB_PROP_NAME = createUniqueKey(GlobProp.GLOB_PROP, "KEY_GLOB_PROP_NAME", GlobProp.GLOB_PROP.NAME);
        public static final UniqueKey<IdxRecord> KEY_IDX_PRIMARY = createUniqueKey(Idx.IDX, "KEY_IDX_PRIMARY", Idx.IDX.ID);
        public static final UniqueKey<IdxRecord> KEY_IDX_NAME = createUniqueKey(Idx.IDX, "KEY_IDX_NAME", Idx.IDX.FK_FOLDER_ID, Idx.IDX.NAME);
        public static final UniqueKey<IdxRecord> KEY_IDX_UUID = createUniqueKey(Idx.IDX, "KEY_IDX_UUID", Idx.IDX.UUID);
        public static final UniqueKey<IdxShrdRecord> KEY_IDX_SHRD_PRIMARY = createUniqueKey(IdxShrd.IDX_SHRD, "KEY_IDX_SHRD_PRIMARY", IdxShrd.IDX_SHRD.ID);
        public static final UniqueKey<IdxVolRecord> KEY_IDX_VOL_PRIMARY = createUniqueKey(IdxVol.IDX_VOL, "KEY_IDX_VOL_PRIMARY", IdxVol.IDX_VOL.FK_IDX_ID, IdxVol.IDX_VOL.FK_VOL_ID);
        public static final UniqueKey<JbRecord> KEY_JB_PRIMARY = createUniqueKey(Jb.JB, "KEY_JB_PRIMARY", Jb.JB.ID);
        public static final UniqueKey<JbRecord> KEY_JB_NAME = createUniqueKey(Jb.JB, "KEY_JB_NAME", Jb.JB.NAME);
        public static final UniqueKey<JbNdRecord> KEY_JB_ND_PRIMARY = createUniqueKey(JbNd.JB_ND, "KEY_JB_ND_PRIMARY", JbNd.JB_ND.ID);
        public static final UniqueKey<JbNdRecord> KEY_JB_ND_FK_ND_ID = createUniqueKey(JbNd.JB_ND, "KEY_JB_ND_FK_ND_ID", JbNd.JB_ND.FK_ND_ID, JbNd.JB_ND.FK_JB_ID);
        public static final UniqueKey<NdRecord> KEY_ND_PRIMARY = createUniqueKey(Nd.ND, "KEY_ND_PRIMARY", Nd.ND.ID);
        public static final UniqueKey<NdRecord> KEY_ND_NAME = createUniqueKey(Nd.ND, "KEY_ND_NAME", Nd.ND.NAME);
        public static final UniqueKey<PermRecord> KEY_PERM_PRIMARY = createUniqueKey(Perm.PERM, "KEY_PERM_PRIMARY", Perm.PERM.ID);
        public static final UniqueKey<PermRecord> KEY_PERM_NAME = createUniqueKey(Perm.PERM, "KEY_PERM_NAME", Perm.PERM.NAME);
        public static final UniqueKey<PipeRecord> KEY_PIPE_PRIMARY = createUniqueKey(Pipe.PIPE, "KEY_PIPE_PRIMARY", Pipe.PIPE.ID);
        public static final UniqueKey<PipeRecord> KEY_PIPE_NAME = createUniqueKey(Pipe.PIPE, "KEY_PIPE_NAME", Pipe.PIPE.FK_FOLDER_ID, Pipe.PIPE.NAME);
        public static final UniqueKey<PipeRecord> KEY_PIPE_UUID = createUniqueKey(Pipe.PIPE, "KEY_PIPE_UUID", Pipe.PIPE.UUID);
        public static final UniqueKey<QueryRecord> KEY_QUERY_PRIMARY = createUniqueKey(Query.QUERY, "KEY_QUERY_PRIMARY", Query.QUERY.ID);
        public static final UniqueKey<QueryRecord> KEY_QUERY_UUID = createUniqueKey(Query.QUERY, "KEY_QUERY_UUID", Query.QUERY.UUID);
        public static final UniqueKey<ResRecord> KEY_RES_PRIMARY = createUniqueKey(Res.RES, "KEY_RES_PRIMARY", Res.RES.ID);
        public static final UniqueKey<RkRecord> KEY_RK_PRIMARY = createUniqueKey(Rk.RK, "KEY_RK_PRIMARY", Rk.RK.ID);
        public static final UniqueKey<RkRecord> KEY_RK_NAME = createUniqueKey(Rk.RK, "KEY_RK_NAME", Rk.RK.NAME);
        public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = createUniqueKey(SchemaVersion.SCHEMA_VERSION, "KEY_schema_version_PRIMARY", SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK);
        public static final UniqueKey<ScriptRecord> KEY_SCRIPT_PRIMARY = createUniqueKey(Script.SCRIPT, "KEY_SCRIPT_PRIMARY", Script.SCRIPT.ID);
        public static final UniqueKey<ScriptRecord> KEY_SCRIPT_NAME = createUniqueKey(Script.SCRIPT, "KEY_SCRIPT_NAME", Script.SCRIPT.FK_FOLDER_ID, Script.SCRIPT.NAME);
        public static final UniqueKey<ScriptRecord> KEY_SCRIPT_UUID = createUniqueKey(Script.SCRIPT, "KEY_SCRIPT_UUID", Script.SCRIPT.UUID);
        public static final UniqueKey<SqlStatKeyRecord> KEY_SQL_STAT_KEY_PRIMARY = createUniqueKey(SqlStatKey.SQL_STAT_KEY, "KEY_SQL_STAT_KEY_PRIMARY", SqlStatKey.SQL_STAT_KEY.ID);
        public static final UniqueKey<SqlStatKeyRecord> KEY_SQL_STAT_KEY_NAME = createUniqueKey(SqlStatKey.SQL_STAT_KEY, "KEY_SQL_STAT_KEY_NAME", SqlStatKey.SQL_STAT_KEY.NAME);
        public static final UniqueKey<SqlStatValRecord> KEY_SQL_STAT_VAL_PRIMARY = createUniqueKey(SqlStatVal.SQL_STAT_VAL, "KEY_SQL_STAT_VAL_PRIMARY", SqlStatVal.SQL_STAT_VAL.FK_SQL_STAT_KEY_ID, SqlStatVal.SQL_STAT_VAL.TIME_MS, SqlStatVal.SQL_STAT_VAL.VAL_TP, SqlStatVal.SQL_STAT_VAL.PRES);
        public static final UniqueKey<StateDatSrcRecord> KEY_STATE_DAT_SRC_PRIMARY = createUniqueKey(StateDatSrc.STATE_DAT_SRC, "KEY_STATE_DAT_SRC_PRIMARY", StateDatSrc.STATE_DAT_SRC.ID);
        public static final UniqueKey<StateDatSrcRecord> KEY_STATE_DAT_SRC_NAME = createUniqueKey(StateDatSrc.STATE_DAT_SRC, "KEY_STATE_DAT_SRC_NAME", StateDatSrc.STATE_DAT_SRC.FK_FOLDER_ID, StateDatSrc.STATE_DAT_SRC.NAME);
        public static final UniqueKey<StateDatSrcRecord> KEY_STATE_DAT_SRC_UUID = createUniqueKey(StateDatSrc.STATE_DAT_SRC, "KEY_STATE_DAT_SRC_UUID", StateDatSrc.STATE_DAT_SRC.UUID);
        public static final UniqueKey<StatDatSrcRecord> KEY_STAT_DAT_SRC_PRIMARY = createUniqueKey(StatDatSrc.STAT_DAT_SRC, "KEY_STAT_DAT_SRC_PRIMARY", StatDatSrc.STAT_DAT_SRC.ID);
        public static final UniqueKey<StatDatSrcRecord> KEY_STAT_DAT_SRC_NAME = createUniqueKey(StatDatSrc.STAT_DAT_SRC, "KEY_STAT_DAT_SRC_NAME", StatDatSrc.STAT_DAT_SRC.FK_FOLDER_ID, StatDatSrc.STAT_DAT_SRC.NAME);
        public static final UniqueKey<StatDatSrcRecord> KEY_STAT_DAT_SRC_UUID = createUniqueKey(StatDatSrc.STAT_DAT_SRC, "KEY_STAT_DAT_SRC_UUID", StatDatSrc.STAT_DAT_SRC.UUID);
        public static final UniqueKey<StrmRecord> KEY_STRM_PRIMARY = createUniqueKey(Strm.STRM, "KEY_STRM_PRIMARY", Strm.STRM.ID);
        public static final UniqueKey<StrmAtrKeyRecord> KEY_STRM_ATR_KEY_PRIMARY = createUniqueKey(StrmAtrKey.STRM_ATR_KEY, "KEY_STRM_ATR_KEY_PRIMARY", StrmAtrKey.STRM_ATR_KEY.ID);
        public static final UniqueKey<StrmAtrKeyRecord> KEY_STRM_ATR_KEY_NAME = createUniqueKey(StrmAtrKey.STRM_ATR_KEY, "KEY_STRM_ATR_KEY_NAME", StrmAtrKey.STRM_ATR_KEY.NAME);
        public static final UniqueKey<StrmAtrValRecord> KEY_STRM_ATR_VAL_PRIMARY = createUniqueKey(StrmAtrVal.STRM_ATR_VAL, "KEY_STRM_ATR_VAL_PRIMARY", StrmAtrVal.STRM_ATR_VAL.ID);
        public static final UniqueKey<StrmProcRecord> KEY_STRM_PROC_PRIMARY = createUniqueKey(StrmProc.STRM_PROC, "KEY_STRM_PROC_PRIMARY", StrmProc.STRM_PROC.ID);
        public static final UniqueKey<StrmProcFiltRecord> KEY_STRM_PROC_FILT_PRIMARY = createUniqueKey(StrmProcFilt.STRM_PROC_FILT, "KEY_STRM_PROC_FILT_PRIMARY", StrmProcFilt.STRM_PROC_FILT.ID);
        public static final UniqueKey<StrmProcFiltTracRecord> KEY_STRM_PROC_FILT_TRAC_PRIMARY = createUniqueKey(StrmProcFiltTrac.STRM_PROC_FILT_TRAC, "KEY_STRM_PROC_FILT_TRAC_PRIMARY", StrmProcFiltTrac.STRM_PROC_FILT_TRAC.ID);
        public static final UniqueKey<StrmTaskRecord> KEY_STRM_TASK_PRIMARY = createUniqueKey(StrmTask.STRM_TASK, "KEY_STRM_TASK_PRIMARY", StrmTask.STRM_TASK.ID);
        public static final UniqueKey<StrmTpRecord> KEY_STRM_TP_PRIMARY = createUniqueKey(StrmTp.STRM_TP, "KEY_STRM_TP_PRIMARY", StrmTp.STRM_TP.ID);
        public static final UniqueKey<StrmTpRecord> KEY_STRM_TP_NAME = createUniqueKey(StrmTp.STRM_TP, "KEY_STRM_TP_NAME", StrmTp.STRM_TP.NAME);
        public static final UniqueKey<StrmVolRecord> KEY_STRM_VOL_PRIMARY = createUniqueKey(StrmVol.STRM_VOL, "KEY_STRM_VOL_PRIMARY", StrmVol.STRM_VOL.ID);
        public static final UniqueKey<StroomStatsStoreRecord> KEY_STROOM_STATS_STORE_PRIMARY = createUniqueKey(StroomStatsStore.STROOM_STATS_STORE, "KEY_STROOM_STATS_STORE_PRIMARY", StroomStatsStore.STROOM_STATS_STORE.ID);
        public static final UniqueKey<StroomStatsStoreRecord> KEY_STROOM_STATS_STORE_NAME = createUniqueKey(StroomStatsStore.STROOM_STATS_STORE, "KEY_STROOM_STATS_STORE_NAME", StroomStatsStore.STROOM_STATS_STORE.FK_FOLDER_ID, StroomStatsStore.STROOM_STATS_STORE.NAME);
        public static final UniqueKey<StroomStatsStoreRecord> KEY_STROOM_STATS_STORE_UUID = createUniqueKey(StroomStatsStore.STROOM_STATS_STORE, "KEY_STROOM_STATS_STORE_UUID", StroomStatsStore.STROOM_STATS_STORE.UUID);
        public static final UniqueKey<TxtConvRecord> KEY_TXT_CONV_PRIMARY = createUniqueKey(TxtConv.TXT_CONV, "KEY_TXT_CONV_PRIMARY", TxtConv.TXT_CONV.ID);
        public static final UniqueKey<TxtConvRecord> KEY_TXT_CONV_NAME = createUniqueKey(TxtConv.TXT_CONV, "KEY_TXT_CONV_NAME", TxtConv.TXT_CONV.FK_FOLDER_ID, TxtConv.TXT_CONV.NAME);
        public static final UniqueKey<TxtConvRecord> KEY_TXT_CONV_UUID = createUniqueKey(TxtConv.TXT_CONV, "KEY_TXT_CONV_UUID", TxtConv.TXT_CONV.UUID);
        public static final UniqueKey<UsrRecord> KEY_USR_PRIMARY = createUniqueKey(Usr.USR, "KEY_USR_PRIMARY", Usr.USR.ID);
        public static final UniqueKey<UsrRecord> KEY_USR_NAME = createUniqueKey(Usr.USR, "KEY_USR_NAME", Usr.USR.NAME, Usr.USR.GRP);
        public static final UniqueKey<UsrRecord> KEY_USR_USR_UUID_IDX = createUniqueKey(Usr.USR, "KEY_USR_USR_UUID_IDX", Usr.USR.UUID);
        public static final UniqueKey<UsrGrpUsrRecord> KEY_USR_GRP_USR_PRIMARY = createUniqueKey(UsrGrpUsr.USR_GRP_USR, "KEY_USR_GRP_USR_PRIMARY", UsrGrpUsr.USR_GRP_USR.ID);
        public static final UniqueKey<UsrGrpUsrRecord> KEY_USR_GRP_USR_USR_GRP_USR_GRP_UUID_USR_UUID_IDX = createUniqueKey(UsrGrpUsr.USR_GRP_USR, "KEY_USR_GRP_USR_USR_GRP_USR_GRP_UUID_USR_UUID_IDX", UsrGrpUsr.USR_GRP_USR.GRP_UUID, UsrGrpUsr.USR_GRP_USR.USR_UUID);
        public static final UniqueKey<VisRecord> KEY_VIS_PRIMARY = createUniqueKey(Vis.VIS, "KEY_VIS_PRIMARY", Vis.VIS.ID);
        public static final UniqueKey<VisRecord> KEY_VIS_NAME = createUniqueKey(Vis.VIS, "KEY_VIS_NAME", Vis.VIS.FK_FOLDER_ID, Vis.VIS.NAME);
        public static final UniqueKey<VisRecord> KEY_VIS_UUID = createUniqueKey(Vis.VIS, "KEY_VIS_UUID", Vis.VIS.UUID);
        public static final UniqueKey<VolRecord> KEY_VOL_PRIMARY = createUniqueKey(Vol.VOL, "KEY_VOL_PRIMARY", Vol.VOL.ID);
        public static final UniqueKey<VolRecord> KEY_VOL_FK_ND_ID = createUniqueKey(Vol.VOL, "KEY_VOL_FK_ND_ID", Vol.VOL.FK_ND_ID, Vol.VOL.PATH);
        public static final UniqueKey<VolStateRecord> KEY_VOL_STATE_PRIMARY = createUniqueKey(VolState.VOL_STATE, "KEY_VOL_STATE_PRIMARY", VolState.VOL_STATE.ID);
        public static final UniqueKey<XmlSchemaRecord> KEY_XML_SCHEMA_PRIMARY = createUniqueKey(XmlSchema.XML_SCHEMA, "KEY_XML_SCHEMA_PRIMARY", XmlSchema.XML_SCHEMA.ID);
        public static final UniqueKey<XmlSchemaRecord> KEY_XML_SCHEMA_NAME = createUniqueKey(XmlSchema.XML_SCHEMA, "KEY_XML_SCHEMA_NAME", XmlSchema.XML_SCHEMA.FK_FOLDER_ID, XmlSchema.XML_SCHEMA.NAME);
        public static final UniqueKey<XmlSchemaRecord> KEY_XML_SCHEMA_UUID = createUniqueKey(XmlSchema.XML_SCHEMA, "KEY_XML_SCHEMA_UUID", XmlSchema.XML_SCHEMA.UUID);
        public static final UniqueKey<XsltRecord> KEY_XSLT_PRIMARY = createUniqueKey(Xslt.XSLT, "KEY_XSLT_PRIMARY", Xslt.XSLT.ID);
        public static final UniqueKey<XsltRecord> KEY_XSLT_NAME = createUniqueKey(Xslt.XSLT, "KEY_XSLT_NAME", Xslt.XSLT.FK_FOLDER_ID, Xslt.XSLT.NAME);
        public static final UniqueKey<XsltRecord> KEY_XSLT_UUID = createUniqueKey(Xslt.XSLT, "KEY_XSLT_UUID", Xslt.XSLT.UUID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<AnalOutDatSrcRecord, FolderRecord> ANAL_OUT_DAT_SRC_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, AnalOutDatSrc.ANAL_OUT_DAT_SRC, "ANAL_OUT_DAT_SRC_FK_FOLDER_ID", AnalOutDatSrc.ANAL_OUT_DAT_SRC.FK_FOLDER_ID);
        public static final ForeignKey<DashRecord, FolderRecord> DASH_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Dash.DASH, "DASH_FK_FOLDER_ID", Dash.DASH.FK_FOLDER_ID);
        public static final ForeignKey<DictRecord, FolderRecord> DICT_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Dict.DICT, "DICT_FK_FOLDER_ID", Dict.DICT.FK_FOLDER_ID);
        public static final ForeignKey<FdRecord, FolderRecord> FD_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Fd.FD, "FD_FK_FOLDER_ID", Fd.FD.FK_FOLDER_ID);
        public static final ForeignKey<FdRecord, StrmTpRecord> FD_FK_STRM_TP_ID = createForeignKey(stroom.models.Keys.KEY_STRM_TP_PRIMARY, Fd.FD, "FD_FK_STRM_TP_ID", Fd.FD.FK_STRM_TP_ID);
        public static final ForeignKey<FolderRecord, FolderRecord> FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Folder.FOLDER, "FK_FOLDER_ID", Folder.FOLDER.FK_FOLDER_ID);
        public static final ForeignKey<IdxRecord, FolderRecord> IDX_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Idx.IDX, "IDX_FK_FOLDER_ID", Idx.IDX.FK_FOLDER_ID);
        public static final ForeignKey<IdxShrdRecord, IdxRecord> IDX_SHRD_FK_IDX_ID = createForeignKey(stroom.models.Keys.KEY_IDX_PRIMARY, IdxShrd.IDX_SHRD, "IDX_SHRD_FK_IDX_ID", IdxShrd.IDX_SHRD.FK_IDX_ID);
        public static final ForeignKey<IdxShrdRecord, NdRecord> IDX_SHRD_FK_ND_ID = createForeignKey(stroom.models.Keys.KEY_ND_PRIMARY, IdxShrd.IDX_SHRD, "IDX_SHRD_FK_ND_ID", IdxShrd.IDX_SHRD.FK_ND_ID);
        public static final ForeignKey<IdxShrdRecord, VolRecord> IDX_SHRD_FK_VOL_ID = createForeignKey(stroom.models.Keys.KEY_VOL_PRIMARY, IdxShrd.IDX_SHRD, "IDX_SHRD_FK_VOL_ID", IdxShrd.IDX_SHRD.FK_VOL_ID);
        public static final ForeignKey<IdxVolRecord, IdxRecord> VOL_FK_IDX_ID = createForeignKey(stroom.models.Keys.KEY_IDX_PRIMARY, IdxVol.IDX_VOL, "VOL_FK_IDX_ID", IdxVol.IDX_VOL.FK_IDX_ID);
        public static final ForeignKey<IdxVolRecord, VolRecord> IDX_FK_VOL_ID = createForeignKey(stroom.models.Keys.KEY_VOL_PRIMARY, IdxVol.IDX_VOL, "IDX_FK_VOL_ID", IdxVol.IDX_VOL.FK_VOL_ID);
        public static final ForeignKey<JbNdRecord, JbRecord> JB_ND_FK_JB_ID = createForeignKey(stroom.models.Keys.KEY_JB_PRIMARY, JbNd.JB_ND, "JB_ND_FK_JB_ID", JbNd.JB_ND.FK_JB_ID);
        public static final ForeignKey<JbNdRecord, NdRecord> JB_ND_FK_ND_ID = createForeignKey(stroom.models.Keys.KEY_ND_PRIMARY, JbNd.JB_ND, "JB_ND_FK_ND_ID", JbNd.JB_ND.FK_ND_ID);
        public static final ForeignKey<NdRecord, RkRecord> ND_FK_RK_ID = createForeignKey(stroom.models.Keys.KEY_RK_PRIMARY, Nd.ND, "ND_FK_RK_ID", Nd.ND.FK_RK_ID);
        public static final ForeignKey<PipeRecord, FolderRecord> PIPE_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Pipe.PIPE, "PIPE_FK_FOLDER_ID", Pipe.PIPE.FK_FOLDER_ID);
        public static final ForeignKey<QueryRecord, DashRecord> QUERY_FK_DASH_ID = createForeignKey(stroom.models.Keys.KEY_DASH_PRIMARY, Query.QUERY, "QUERY_FK_DASH_ID", Query.QUERY.FK_DASH_ID);
        public static final ForeignKey<ScriptRecord, ResRecord> SCRIPT_FK_RES_ID = createForeignKey(stroom.models.Keys.KEY_RES_PRIMARY, Script.SCRIPT, "SCRIPT_FK_RES_ID", Script.SCRIPT.FK_RES_ID);
        public static final ForeignKey<ScriptRecord, FolderRecord> SCRIPT_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Script.SCRIPT, "SCRIPT_FK_FOLDER_ID", Script.SCRIPT.FK_FOLDER_ID);
        public static final ForeignKey<SqlStatValRecord, SqlStatKeyRecord> SQL_STAT_VAL_FK_STAT_KEY_ID = createForeignKey(stroom.models.Keys.KEY_SQL_STAT_KEY_PRIMARY, SqlStatVal.SQL_STAT_VAL, "SQL_STAT_VAL_FK_STAT_KEY_ID", SqlStatVal.SQL_STAT_VAL.FK_SQL_STAT_KEY_ID);
        public static final ForeignKey<StateDatSrcRecord, FolderRecord> STATE_DAT_SRC_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, StateDatSrc.STATE_DAT_SRC, "STATE_DAT_SRC_FK_FOLDER_ID", StateDatSrc.STATE_DAT_SRC.FK_FOLDER_ID);
        public static final ForeignKey<StatDatSrcRecord, FolderRecord> STAT_DAT_SRC_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, StatDatSrc.STAT_DAT_SRC, "STAT_DAT_SRC_FK_FOLDER_ID", StatDatSrc.STAT_DAT_SRC.FK_FOLDER_ID);
        public static final ForeignKey<StrmRecord, FdRecord> STRM_FK_FD_ID = createForeignKey(stroom.models.Keys.KEY_FD_PRIMARY, Strm.STRM, "STRM_FK_FD_ID", Strm.STRM.FK_FD_ID);
        public static final ForeignKey<StrmRecord, StrmProcRecord> STRM_FK_STRM_PROC_ID = createForeignKey(stroom.models.Keys.KEY_STRM_PROC_PRIMARY, Strm.STRM, "STRM_FK_STRM_PROC_ID", Strm.STRM.FK_STRM_PROC_ID);
        public static final ForeignKey<StrmRecord, StrmTpRecord> STRM_FK_STRM_TP_ID = createForeignKey(stroom.models.Keys.KEY_STRM_TP_PRIMARY, Strm.STRM, "STRM_FK_STRM_TP_ID", Strm.STRM.FK_STRM_TP_ID);
        public static final ForeignKey<StrmProcRecord, PipeRecord> STRM_PROC_FK_PIPE_ID = createForeignKey(stroom.models.Keys.KEY_PIPE_PRIMARY, StrmProc.STRM_PROC, "STRM_PROC_FK_PIPE_ID", StrmProc.STRM_PROC.FK_PIPE_ID);
        public static final ForeignKey<StrmProcFiltRecord, StrmProcRecord> STRM_PROC_FILT_FK_STRM_PROC_ID = createForeignKey(stroom.models.Keys.KEY_STRM_PROC_PRIMARY, StrmProcFilt.STRM_PROC_FILT, "STRM_PROC_FILT_FK_STRM_PROC_ID", StrmProcFilt.STRM_PROC_FILT.FK_STRM_PROC_ID);
        public static final ForeignKey<StrmProcFiltRecord, StrmProcFiltTracRecord> STRM_PROC_FILT_FK_STRM_PROC_FILT_TRAC_ID = createForeignKey(stroom.models.Keys.KEY_STRM_PROC_FILT_TRAC_PRIMARY, StrmProcFilt.STRM_PROC_FILT, "STRM_PROC_FILT_FK_STRM_PROC_FILT_TRAC_ID", StrmProcFilt.STRM_PROC_FILT.FK_STRM_PROC_FILT_TRAC_ID);
        public static final ForeignKey<StrmTaskRecord, NdRecord> STRM_TASK_FK_ND_ID = createForeignKey(stroom.models.Keys.KEY_ND_PRIMARY, StrmTask.STRM_TASK, "STRM_TASK_FK_ND_ID", StrmTask.STRM_TASK.FK_ND_ID);
        public static final ForeignKey<StrmTaskRecord, StrmProcFiltRecord> STRM_TASK_FK_STRM_PROC_FILT_ID = createForeignKey(stroom.models.Keys.KEY_STRM_PROC_FILT_PRIMARY, StrmTask.STRM_TASK, "STRM_TASK_FK_STRM_PROC_FILT_ID", StrmTask.STRM_TASK.FK_STRM_PROC_FILT_ID);
        public static final ForeignKey<StrmVolRecord, StrmRecord> STRM_VOL_FK_STRM_ID = createForeignKey(stroom.models.Keys.KEY_STRM_PRIMARY, StrmVol.STRM_VOL, "STRM_VOL_FK_STRM_ID", StrmVol.STRM_VOL.FK_STRM_ID);
        public static final ForeignKey<StrmVolRecord, VolRecord> STRM_VOL_FK_VOL_ID = createForeignKey(stroom.models.Keys.KEY_VOL_PRIMARY, StrmVol.STRM_VOL, "STRM_VOL_FK_VOL_ID", StrmVol.STRM_VOL.FK_VOL_ID);
        public static final ForeignKey<StroomStatsStoreRecord, FolderRecord> STROOM_STATS_STORE_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, StroomStatsStore.STROOM_STATS_STORE, "STROOM_STATS_STORE_FK_FOLDER_ID", StroomStatsStore.STROOM_STATS_STORE.FK_FOLDER_ID);
        public static final ForeignKey<TxtConvRecord, FolderRecord> TXT_CONV_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, TxtConv.TXT_CONV, "TXT_CONV_FK_FOLDER_ID", TxtConv.TXT_CONV.FK_FOLDER_ID);
        public static final ForeignKey<VisRecord, FolderRecord> VIS_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Vis.VIS, "VIS_FK_FOLDER_ID", Vis.VIS.FK_FOLDER_ID);
        public static final ForeignKey<VolRecord, NdRecord> VOL_FK_ND_ID = createForeignKey(stroom.models.Keys.KEY_ND_PRIMARY, Vol.VOL, "VOL_FK_ND_ID", Vol.VOL.FK_ND_ID);
        public static final ForeignKey<VolRecord, VolStateRecord> VOL_STAT_FK_VOL_STATE_ID = createForeignKey(stroom.models.Keys.KEY_VOL_STATE_PRIMARY, Vol.VOL, "VOL_STAT_FK_VOL_STATE_ID", Vol.VOL.FK_VOL_STATE_ID);
        public static final ForeignKey<XmlSchemaRecord, FolderRecord> XML_SCHEMA_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, XmlSchema.XML_SCHEMA, "XML_SCHEMA_FK_FOLDER_ID", XmlSchema.XML_SCHEMA.FK_FOLDER_ID);
        public static final ForeignKey<XsltRecord, FolderRecord> XSLT_FK_FOLDER_ID = createForeignKey(stroom.models.Keys.KEY_FOLDER_PRIMARY, Xslt.XSLT, "XSLT_FK_FOLDER_ID", Xslt.XSLT.FK_FOLDER_ID);
    }
}
