/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.models.Keys;
import stroom.models.Stroom;
import stroom.models.tables.records.UsrRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usr extends TableImpl<UsrRecord> {

    private static final long serialVersionUID = 360763680;

    /**
     * The reference instance of <code>stroom.USR</code>
     */
    public static final Usr USR = new Usr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsrRecord> getRecordType() {
        return UsrRecord.class;
    }

    /**
     * The column <code>stroom.USR.ID</code>.
     */
    public final TableField<UsrRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.USR.VER</code>.
     */
    public final TableField<UsrRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.USR.CRT_MS</code>.
     */
    public final TableField<UsrRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.USR.CRT_USER</code>.
     */
    public final TableField<UsrRecord, String> CRT_USER = createField("CRT_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.USR.UPD_MS</code>.
     */
    public final TableField<UsrRecord, Long> UPD_MS = createField("UPD_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.USR.UPD_USER</code>.
     */
    public final TableField<UsrRecord, String> UPD_USER = createField("UPD_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.USR.NAME</code>.
     */
    public final TableField<UsrRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.USR.UUID</code>.
     */
    public final TableField<UsrRecord, String> UUID = createField("UUID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.USR.GRP</code>.
     */
    public final TableField<UsrRecord, Boolean> GRP = createField("GRP", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.USR.STAT</code>.
     */
    public final TableField<UsrRecord, Byte> STAT = createField("STAT", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.USR.CUR_LOGIN_FAIL</code>.
     */
    public final TableField<UsrRecord, Short> CUR_LOGIN_FAIL = createField("CUR_LOGIN_FAIL", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>stroom.USR.LOGIN_EXPIRY</code>.
     */
    public final TableField<UsrRecord, Boolean> LOGIN_EXPIRY = createField("LOGIN_EXPIRY", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.USR.LAST_LOGIN_MS</code>.
     */
    public final TableField<UsrRecord, Long> LAST_LOGIN_MS = createField("LAST_LOGIN_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.USR.LOGIN_VALID_MS</code>.
     */
    public final TableField<UsrRecord, Long> LOGIN_VALID_MS = createField("LOGIN_VALID_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.USR.PASS_EXPIRY_MS</code>.
     */
    public final TableField<UsrRecord, Long> PASS_EXPIRY_MS = createField("PASS_EXPIRY_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.USR.PASS_HASH</code>.
     */
    public final TableField<UsrRecord, String> PASS_HASH = createField("PASS_HASH", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.USR.TOTL_LOGIN_FAIL</code>.
     */
    public final TableField<UsrRecord, Short> TOTL_LOGIN_FAIL = createField("TOTL_LOGIN_FAIL", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>stroom.USR</code> table reference
     */
    public Usr() {
        this("USR", null);
    }

    /**
     * Create an aliased <code>stroom.USR</code> table reference
     */
    public Usr(String alias) {
        this(alias, USR);
    }

    private Usr(String alias, Table<UsrRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usr(String alias, Table<UsrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsrRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsrRecord> getPrimaryKey() {
        return Keys.KEY_USR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsrRecord>> getKeys() {
        return Arrays.<UniqueKey<UsrRecord>>asList(Keys.KEY_USR_PRIMARY, Keys.KEY_USR_NAME, Keys.KEY_USR_USR_UUID_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usr as(String alias) {
        return new Usr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usr rename(String name) {
        return new Usr(name, null);
    }
}
