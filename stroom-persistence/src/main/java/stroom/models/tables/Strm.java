/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.models.Keys;
import stroom.models.Stroom;
import stroom.models.tables.records.StrmRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Strm extends TableImpl<StrmRecord> {

    private static final long serialVersionUID = -1313315924;

    /**
     * The reference instance of <code>stroom.STRM</code>
     */
    public static final Strm STRM = new Strm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StrmRecord> getRecordType() {
        return StrmRecord.class;
    }

    /**
     * The column <code>stroom.STRM.ID</code>.
     */
    public final TableField<StrmRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.STRM.VER</code>.
     */
    public final TableField<StrmRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.STRM.CRT_MS</code>.
     */
    public final TableField<StrmRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.STRM.EFFECT_MS</code>.
     */
    public final TableField<StrmRecord, Long> EFFECT_MS = createField("EFFECT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.STRM.PARNT_STRM_ID</code>.
     */
    public final TableField<StrmRecord, Long> PARNT_STRM_ID = createField("PARNT_STRM_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.STRM.STAT</code>.
     */
    public final TableField<StrmRecord, Byte> STAT = createField("STAT", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.STRM.STAT_MS</code>.
     */
    public final TableField<StrmRecord, Long> STAT_MS = createField("STAT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.STRM.STRM_TASK_ID</code>.
     */
    public final TableField<StrmRecord, Long> STRM_TASK_ID = createField("STRM_TASK_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.STRM.FK_FD_ID</code>.
     */
    public final TableField<StrmRecord, Integer> FK_FD_ID = createField("FK_FD_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.STRM.FK_STRM_PROC_ID</code>.
     */
    public final TableField<StrmRecord, Integer> FK_STRM_PROC_ID = createField("FK_STRM_PROC_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stroom.STRM.FK_STRM_TP_ID</code>.
     */
    public final TableField<StrmRecord, Integer> FK_STRM_TP_ID = createField("FK_STRM_TP_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.STRM</code> table reference
     */
    public Strm() {
        this("STRM", null);
    }

    /**
     * Create an aliased <code>stroom.STRM</code> table reference
     */
    public Strm(String alias) {
        this(alias, STRM);
    }

    private Strm(String alias, Table<StrmRecord> aliased) {
        this(alias, aliased, null);
    }

    private Strm(String alias, Table<StrmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StrmRecord, Long> getIdentity() {
        return Keys.IDENTITY_STRM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StrmRecord> getPrimaryKey() {
        return Keys.KEY_STRM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StrmRecord>> getKeys() {
        return Arrays.<UniqueKey<StrmRecord>>asList(Keys.KEY_STRM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StrmRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StrmRecord, ?>>asList(Keys.STRM_FK_FD_ID, Keys.STRM_FK_STRM_PROC_ID, Keys.STRM_FK_STRM_TP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Strm as(String alias) {
        return new Strm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Strm rename(String name) {
        return new Strm(name, null);
    }
}
