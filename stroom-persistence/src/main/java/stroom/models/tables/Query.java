/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.models.Keys;
import stroom.models.Stroom;
import stroom.models.tables.records.QueryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Query extends TableImpl<QueryRecord> {

    private static final long serialVersionUID = 1305497399;

    /**
     * The reference instance of <code>stroom.QUERY</code>
     */
    public static final Query QUERY = new Query();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QueryRecord> getRecordType() {
        return QueryRecord.class;
    }

    /**
     * The column <code>stroom.QUERY.ID</code>.
     */
    public final TableField<QueryRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.QUERY.VER</code>.
     */
    public final TableField<QueryRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.QUERY.CRT_MS</code>.
     */
    public final TableField<QueryRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.QUERY.CRT_USER</code>.
     */
    public final TableField<QueryRecord, String> CRT_USER = createField("CRT_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.QUERY.UPD_MS</code>.
     */
    public final TableField<QueryRecord, Long> UPD_MS = createField("UPD_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.QUERY.UPD_USER</code>.
     */
    public final TableField<QueryRecord, String> UPD_USER = createField("UPD_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.QUERY.NAME</code>.
     */
    public final TableField<QueryRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.QUERY.UUID</code>.
     */
    public final TableField<QueryRecord, String> UUID = createField("UUID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.QUERY.FK_DASH_ID</code>.
     */
    public final TableField<QueryRecord, Integer> FK_DASH_ID = createField("FK_DASH_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stroom.QUERY.DAT</code>.
     */
    public final TableField<QueryRecord, String> DAT = createField("DAT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.QUERY.FAVOURITE</code>.
     */
    public final TableField<QueryRecord, Boolean> FAVOURITE = createField("FAVOURITE", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.QUERY.FK_FOLDER_ID</code>.
     */
    public final TableField<QueryRecord, Integer> FK_FOLDER_ID = createField("FK_FOLDER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>stroom.QUERY</code> table reference
     */
    public Query() {
        this("QUERY", null);
    }

    /**
     * Create an aliased <code>stroom.QUERY</code> table reference
     */
    public Query(String alias) {
        this(alias, QUERY);
    }

    private Query(String alias, Table<QueryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Query(String alias, Table<QueryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QueryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUERY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QueryRecord> getPrimaryKey() {
        return Keys.KEY_QUERY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QueryRecord>> getKeys() {
        return Arrays.<UniqueKey<QueryRecord>>asList(Keys.KEY_QUERY_PRIMARY, Keys.KEY_QUERY_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QueryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QueryRecord, ?>>asList(Keys.QUERY_FK_DASH_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query as(String alias) {
        return new Query(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Query rename(String name) {
        return new Query(name, null);
    }
}
