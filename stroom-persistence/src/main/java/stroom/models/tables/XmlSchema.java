/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.models.Keys;
import stroom.models.Stroom;
import stroom.models.tables.records.XmlSchemaRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XmlSchema extends TableImpl<XmlSchemaRecord> {

    private static final long serialVersionUID = -1337279074;

    /**
     * The reference instance of <code>stroom.XML_SCHEMA</code>
     */
    public static final XmlSchema XML_SCHEMA = new XmlSchema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XmlSchemaRecord> getRecordType() {
        return XmlSchemaRecord.class;
    }

    /**
     * The column <code>stroom.XML_SCHEMA.ID</code>.
     */
    public final TableField<XmlSchemaRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.VER</code>.
     */
    public final TableField<XmlSchemaRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.CRT_MS</code>.
     */
    public final TableField<XmlSchemaRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.CRT_USER</code>.
     */
    public final TableField<XmlSchemaRecord, String> CRT_USER = createField("CRT_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.UPD_MS</code>.
     */
    public final TableField<XmlSchemaRecord, Long> UPD_MS = createField("UPD_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.UPD_USER</code>.
     */
    public final TableField<XmlSchemaRecord, String> UPD_USER = createField("UPD_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.NAME</code>.
     */
    public final TableField<XmlSchemaRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.UUID</code>.
     */
    public final TableField<XmlSchemaRecord, String> UUID = createField("UUID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.DESCRIP</code>.
     */
    public final TableField<XmlSchemaRecord, String> DESCRIP = createField("DESCRIP", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.DAT</code>.
     */
    public final TableField<XmlSchemaRecord, String> DAT = createField("DAT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.DEPRC</code>.
     */
    public final TableField<XmlSchemaRecord, Boolean> DEPRC = createField("DEPRC", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.SCHEMA_GRP</code>.
     */
    public final TableField<XmlSchemaRecord, String> SCHEMA_GRP = createField("SCHEMA_GRP", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.NS</code>.
     */
    public final TableField<XmlSchemaRecord, String> NS = createField("NS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.SYSTEM_ID</code>.
     */
    public final TableField<XmlSchemaRecord, String> SYSTEM_ID = createField("SYSTEM_ID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.XML_SCHEMA.FK_FOLDER_ID</code>.
     */
    public final TableField<XmlSchemaRecord, Integer> FK_FOLDER_ID = createField("FK_FOLDER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>stroom.XML_SCHEMA</code> table reference
     */
    public XmlSchema() {
        this("XML_SCHEMA", null);
    }

    /**
     * Create an aliased <code>stroom.XML_SCHEMA</code> table reference
     */
    public XmlSchema(String alias) {
        this(alias, XML_SCHEMA);
    }

    private XmlSchema(String alias, Table<XmlSchemaRecord> aliased) {
        this(alias, aliased, null);
    }

    private XmlSchema(String alias, Table<XmlSchemaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<XmlSchemaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_XML_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XmlSchemaRecord> getPrimaryKey() {
        return Keys.KEY_XML_SCHEMA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XmlSchemaRecord>> getKeys() {
        return Arrays.<UniqueKey<XmlSchemaRecord>>asList(Keys.KEY_XML_SCHEMA_PRIMARY, Keys.KEY_XML_SCHEMA_NAME, Keys.KEY_XML_SCHEMA_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<XmlSchemaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<XmlSchemaRecord, ?>>asList(Keys.XML_SCHEMA_FK_FOLDER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XmlSchema as(String alias) {
        return new XmlSchema(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XmlSchema rename(String name) {
        return new XmlSchema(name, null);
    }
}
