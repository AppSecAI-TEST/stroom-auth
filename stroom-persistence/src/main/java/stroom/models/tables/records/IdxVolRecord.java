/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.models.tables.IdxVol;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdxVolRecord extends UpdatableRecordImpl<IdxVolRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 248169162;

    /**
     * Setter for <code>stroom.IDX_VOL.FK_IDX_ID</code>.
     */
    public void setFkIdxId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.IDX_VOL.FK_IDX_ID</code>.
     */
    public Integer getFkIdxId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.IDX_VOL.FK_VOL_ID</code>.
     */
    public void setFkVolId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.IDX_VOL.FK_VOL_ID</code>.
     */
    public Integer getFkVolId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return IdxVol.IDX_VOL.FK_IDX_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return IdxVol.IDX_VOL.FK_VOL_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getFkIdxId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getFkVolId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IdxVolRecord value1(Integer value) {
        setFkIdxId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IdxVolRecord value2(Integer value) {
        setFkVolId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IdxVolRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IdxVolRecord
     */
    public IdxVolRecord() {
        super(IdxVol.IDX_VOL);
    }

    /**
     * Create a detached, initialised IdxVolRecord
     */
    public IdxVolRecord(Integer fkIdxId, Integer fkVolId) {
        super(IdxVol.IDX_VOL);

        set(0, fkIdxId);
        set(1, fkVolId);
    }
}
