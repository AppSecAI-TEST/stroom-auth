/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.models.tables.Res;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResRecord extends UpdatableRecordImpl<ResRecord> implements Record7<Integer, Byte, Long, String, Long, String, String> {

    private static final long serialVersionUID = 2119324337;

    /**
     * Setter for <code>stroom.RES.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.RES.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.RES.VER</code>.
     */
    public void setVer(Byte value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.RES.VER</code>.
     */
    public Byte getVer() {
        return (Byte) get(1);
    }

    /**
     * Setter for <code>stroom.RES.CRT_MS</code>.
     */
    public void setCrtMs(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.RES.CRT_MS</code>.
     */
    public Long getCrtMs() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>stroom.RES.CRT_USER</code>.
     */
    public void setCrtUser(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.RES.CRT_USER</code>.
     */
    public String getCrtUser() {
        return (String) get(3);
    }

    /**
     * Setter for <code>stroom.RES.UPD_MS</code>.
     */
    public void setUpdMs(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>stroom.RES.UPD_MS</code>.
     */
    public Long getUpdMs() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>stroom.RES.UPD_USER</code>.
     */
    public void setUpdUser(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>stroom.RES.UPD_USER</code>.
     */
    public String getUpdUser() {
        return (String) get(5);
    }

    /**
     * Setter for <code>stroom.RES.DAT</code>.
     */
    public void setDat(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>stroom.RES.DAT</code>.
     */
    public String getDat() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, Byte, Long, String, Long, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, Byte, Long, String, Long, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Res.RES.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field2() {
        return Res.RES.VER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field3() {
        return Res.RES.CRT_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Res.RES.CRT_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field5() {
        return Res.RES.UPD_MS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Res.RES.UPD_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return Res.RES.DAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value2() {
        return getVer();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value3() {
        return getCrtMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCrtUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value5() {
        return getUpdMs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getUpdUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getDat();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value2(Byte value) {
        setVer(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value3(Long value) {
        setCrtMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value4(String value) {
        setCrtUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value5(Long value) {
        setUpdMs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value6(String value) {
        setUpdUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord value7(String value) {
        setDat(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResRecord values(Integer value1, Byte value2, Long value3, String value4, Long value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResRecord
     */
    public ResRecord() {
        super(Res.RES);
    }

    /**
     * Create a detached, initialised ResRecord
     */
    public ResRecord(Integer id, Byte ver, Long crtMs, String crtUser, Long updMs, String updUser, String dat) {
        super(Res.RES);

        set(0, id);
        set(1, ver);
        set(2, crtMs);
        set(3, crtUser);
        set(4, updMs);
        set(5, updUser);
        set(6, dat);
    }
}
