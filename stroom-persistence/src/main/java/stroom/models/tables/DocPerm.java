/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.models.Keys;
import stroom.models.Stroom;
import stroom.models.tables.records.DocPermRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocPerm extends TableImpl<DocPermRecord> {

    private static final long serialVersionUID = 1685790635;

    /**
     * The reference instance of <code>stroom.DOC_PERM</code>
     */
    public static final DocPerm DOC_PERM = new DocPerm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocPermRecord> getRecordType() {
        return DocPermRecord.class;
    }

    /**
     * The column <code>stroom.DOC_PERM.ID</code>.
     */
    public final TableField<DocPermRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.DOC_PERM.VER</code>.
     */
    public final TableField<DocPermRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.DOC_PERM.USR_UUID</code>.
     */
    public final TableField<DocPermRecord, String> USR_UUID = createField("USR_UUID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.DOC_PERM.DOC_TP</code>.
     */
    public final TableField<DocPermRecord, String> DOC_TP = createField("DOC_TP", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.DOC_PERM.DOC_UUID</code>.
     */
    public final TableField<DocPermRecord, String> DOC_UUID = createField("DOC_UUID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.DOC_PERM.PERM</code>.
     */
    public final TableField<DocPermRecord, String> PERM = createField("PERM", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>stroom.DOC_PERM</code> table reference
     */
    public DocPerm() {
        this("DOC_PERM", null);
    }

    /**
     * Create an aliased <code>stroom.DOC_PERM</code> table reference
     */
    public DocPerm(String alias) {
        this(alias, DOC_PERM);
    }

    private DocPerm(String alias, Table<DocPermRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocPerm(String alias, Table<DocPermRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DocPermRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOC_PERM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocPermRecord> getPrimaryKey() {
        return Keys.KEY_DOC_PERM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocPermRecord>> getKeys() {
        return Arrays.<UniqueKey<DocPermRecord>>asList(Keys.KEY_DOC_PERM_PRIMARY, Keys.KEY_DOC_PERM_DOC_PERM_USR_UUID_DOC_TP_DOC_UUID_PERM_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocPerm as(String alias) {
        return new DocPerm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocPerm rename(String name) {
        return new DocPerm(name, null);
    }
}
