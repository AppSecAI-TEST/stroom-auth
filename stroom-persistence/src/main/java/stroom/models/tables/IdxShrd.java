/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * This file is generated by jOOQ.
*/
package stroom.models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import stroom.models.Keys;
import stroom.models.Stroom;
import stroom.models.tables.records.IdxShrdRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdxShrd extends TableImpl<IdxShrdRecord> {

    private static final long serialVersionUID = 1118476407;

    /**
     * The reference instance of <code>stroom.IDX_SHRD</code>
     */
    public static final IdxShrd IDX_SHRD = new IdxShrd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdxShrdRecord> getRecordType() {
        return IdxShrdRecord.class;
    }

    /**
     * The column <code>stroom.IDX_SHRD.ID</code>.
     */
    public final TableField<IdxShrdRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.VER</code>.
     */
    public final TableField<IdxShrdRecord, Byte> VER = createField("VER", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.CRT_USER</code>.
     */
    public final TableField<IdxShrdRecord, String> CRT_USER = createField("CRT_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.UPD_USER</code>.
     */
    public final TableField<IdxShrdRecord, String> UPD_USER = createField("UPD_USER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.CMT_DOC_CT</code>.
     */
    public final TableField<IdxShrdRecord, Integer> CMT_DOC_CT = createField("CMT_DOC_CT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.CMT_DUR_MS</code>.
     */
    public final TableField<IdxShrdRecord, Long> CMT_DUR_MS = createField("CMT_DUR_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.CMT_MS</code>.
     */
    public final TableField<IdxShrdRecord, Long> CMT_MS = createField("CMT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.DOC_CT</code>.
     */
    public final TableField<IdxShrdRecord, Integer> DOC_CT = createField("DOC_CT", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.FILE_SZ</code>.
     */
    public final TableField<IdxShrdRecord, Long> FILE_SZ = createField("FILE_SZ", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.STAT</code>.
     */
    public final TableField<IdxShrdRecord, Byte> STAT = createField("STAT", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.FK_IDX_ID</code>.
     */
    public final TableField<IdxShrdRecord, Integer> FK_IDX_ID = createField("FK_IDX_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.FK_ND_ID</code>.
     */
    public final TableField<IdxShrdRecord, Integer> FK_ND_ID = createField("FK_ND_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.PART</code>.
     */
    public final TableField<IdxShrdRecord, String> PART = createField("PART", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.FK_VOL_ID</code>.
     */
    public final TableField<IdxShrdRecord, Integer> FK_VOL_ID = createField("FK_VOL_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.IDX_VER</code>.
     */
    public final TableField<IdxShrdRecord, String> IDX_VER = createField("IDX_VER", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>stroom.IDX_SHRD.CRT_MS</code>.
     */
    public final TableField<IdxShrdRecord, Long> CRT_MS = createField("CRT_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.UPD_MS</code>.
     */
    public final TableField<IdxShrdRecord, Long> UPD_MS = createField("UPD_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.PART_FROM_MS</code>.
     */
    public final TableField<IdxShrdRecord, Long> PART_FROM_MS = createField("PART_FROM_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.IDX_SHRD.PART_TO_MS</code>.
     */
    public final TableField<IdxShrdRecord, Long> PART_TO_MS = createField("PART_TO_MS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>stroom.IDX_SHRD</code> table reference
     */
    public IdxShrd() {
        this("IDX_SHRD", null);
    }

    /**
     * Create an aliased <code>stroom.IDX_SHRD</code> table reference
     */
    public IdxShrd(String alias) {
        this(alias, IDX_SHRD);
    }

    private IdxShrd(String alias, Table<IdxShrdRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdxShrd(String alias, Table<IdxShrdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IdxShrdRecord, Integer> getIdentity() {
        return Keys.IDENTITY_IDX_SHRD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IdxShrdRecord> getPrimaryKey() {
        return Keys.KEY_IDX_SHRD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IdxShrdRecord>> getKeys() {
        return Arrays.<UniqueKey<IdxShrdRecord>>asList(Keys.KEY_IDX_SHRD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IdxShrdRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IdxShrdRecord, ?>>asList(Keys.IDX_SHRD_FK_IDX_ID, Keys.IDX_SHRD_FK_ND_ID, Keys.IDX_SHRD_FK_VOL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IdxShrd as(String alias) {
        return new IdxShrd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdxShrd rename(String name) {
        return new IdxShrd(name, null);
    }
}
